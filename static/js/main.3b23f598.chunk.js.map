{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","showImage","classifying","complete","showResults","reducer","currentState","event","formatResults","className","probability","key","toFixed","App","useReducer","state","dispatch","useState","model","setModel","imageUrl","setImageUrl","results","setResults","inputRef","useRef","imageRef","buttonProps","text","action","a","mobilenet","mobilenetModel","current","click","classify","classificationResults","type","accept","capture","ref","onChange","e","files","target","length","url","URL","createObjectURL","onClick","alt","src","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"sWAIMA,G,MAAe,CACnBC,QAAS,UACTC,OAAQ,CACND,QAAS,CAAEE,GAAI,CAAEC,KAAM,iBACvBC,aAAc,CAAEF,GAAI,CAAEC,KAAM,mBAC5BE,eAAgB,CAAEH,GAAI,CAAEC,KAAM,UAC9BG,MAAO,CAAEJ,GAAI,CAAEC,KAAM,eAAiBI,WAAW,GACjDC,YAAa,CAAEN,GAAI,CAAEC,KAAM,aAC3BM,SAAU,CACRP,GAAI,CAAEC,KAAM,kBACZI,WAAW,EACXG,aAAa,MAKbC,EAAU,SAACC,EAAcC,GAAf,OACdd,EAAaE,OAAOW,GAAcV,GAAGW,IAAUd,EAAaC,SAExDc,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OACpB,wBAAIC,IAAKF,GAAT,UAAwBA,EAAxB,cAAqD,IAAdC,GAAmBE,QAAQ,GAAlE,OA0EaC,MAvEf,WAAgB,IAAD,EACaC,qBAAWT,EAASZ,EAAaC,SAD9C,mBACNqB,EADM,KACCC,EADD,OAEaC,mBAAS,MAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,MAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIiBJ,mBAAS,IAJ1B,mBAINK,EAJM,KAIGC,EAJH,KAKPC,EAAWC,mBACXC,EAAWD,mBAEX5B,EAAO,kBAAMmB,EAAS,SA+BtBW,EAAc,CAClBjC,QAAS,CAAEkC,KAAM,aAAcC,OA9BlB,uCAAG,4BAAAC,EAAA,6DAChBjC,IADgB,SAEakC,MAFb,OAEVC,EAFU,OAGhBb,EAASa,GACTnC,IAJgB,2CAAH,sDA+BbC,aAAc,CAAE8B,KAAM,mBAAoBC,OAAQ,cAClD9B,eAAgB,CACd6B,KAAM,eACNC,OAAQ,kBAAML,EAASS,QAAQC,UAEjClC,MAAO,CAAE4B,KAAM,YAAaC,OApBhB,uCAAG,4BAAAC,EAAA,6DACfjC,IADe,SAEqBqB,EAAMiB,SAAST,EAASO,SAF7C,OAETG,EAFS,OAGfb,EAAWa,GACXvC,IAJe,2CAAH,sDAqBZK,YAAa,CAAE0B,KAAM,cAAeC,OAAQ,cAC5C1B,SAAU,CAAEyB,KAAM,QAASC,OAff,WACZN,EAAW,IACXF,EAAY,MACZxB,OApCW,EAmDsCJ,EAAaE,OAAOoB,GAnD1D,IAmDLd,iBAnDK,aAmDcG,mBAnDd,SAqDb,OACE,6BACE,2BACEiC,KAAK,OACLC,OAAO,UACPC,QAAQ,SACRC,IAAKhB,EACLiB,SA3Ce,SAACC,GAAO,IACnBC,EAAUD,EAAEE,OAAZD,MACR,GAAIA,EAAME,OAAS,EAAG,CACpB,IAAMC,EAAMC,IAAIC,gBAAgBL,EAAM,IACtCtB,EAAYyB,GACZjD,QAwCA,4BAAQoD,QAAStB,EAAYZ,GAAOc,QACjCF,EAAYZ,GAAOa,MAErB3B,GAAa,yBAAKiD,IAAI,iBAAiBC,IAAK/B,EAAUoB,IAAKd,IAC3DtB,GAAe,4BAAKkB,EAAQ8B,IAAI5C,MCjFnB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAchE,MACrBiE,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b23f598.chunk.js","sourcesContent":["import React, { useReducer, useState, useRef } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\n\nconst stateMachine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"awaitingUpload\" } },\n    awaitingUpload: { on: { next: \"ready\" } },\n    ready: { on: { next: \"classifying\" }, showImage: true },\n    classifying: { on: { next: \"complete\" } },\n    complete: {\n      on: { next: \"awaitingUpload\" },\n      showImage: true,\n      showResults: true,\n    },\n  },\n};\n\nconst reducer = (currentState, event) =>\n  stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nconst formatResults = ({ className, probability }) => (\n  <li key={className}>{`${className}: ${(probability * 100).toFixed(2)}%`}</li>\n);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = (e) => {\n    const { files } = e.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const identify = async () => {\n    next();\n    const classificationResults = await model.classify(imageRef.current);\n    setResults(classificationResults);\n    next();\n  };\n\n  const reset = () => {\n    setResults([]);\n    setImageUrl(null);\n    next();\n  };\n\n  const buttonProps = {\n    initial: { text: \"Load model\", action: loadModel },\n    loadingModel: { text: \"Loading model...\", action: () => {} },\n    awaitingUpload: {\n      text: \"Upload photo\",\n      action: () => inputRef.current.click(),\n    },\n    ready: { text: \"Identifiy\", action: identify },\n    classifying: { text: \"Identifying\", action: () => {} },\n    complete: { text: \"Reset\", action: reset },\n  };\n\n  const { showImage = false, showResults = false } = stateMachine.states[state];\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        ref={inputRef}\n        onChange={handleUpload}\n      />\n      <button onClick={buttonProps[state].action}>\n        {buttonProps[state].text}\n      </button>\n      {showImage && <img alt=\"upload-preview\" src={imageUrl} ref={imageRef} />}\n      {showResults && <ul>{results.map(formatResults)}</ul>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}